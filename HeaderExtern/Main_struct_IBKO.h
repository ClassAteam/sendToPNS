#ifndef _MAIN_STRUCT_IBKO_H // #endif
#define _MAIN_STRUCT_IBKO_H

// параметры приборов самолета L-410 (кабина - МФИ И МФПУ)
// наименование областей памяти:

// Struct_IBKO_IN -  данные на прием
// Struct_IBKO_OUT - данные на передачу

#pragma pack(push, 1)

//-----------------------------------------------
//МФИ 3 ШТУКИ НА ПРИЕМ
typedef struct
{
 bool Power_MFI[3];         // [0] - ПИТАНИЕ НА МФИ1, [1] - ПИТАНИЕ НА МФИ2, [2] - ПИТАНИЕ НА МФИ3.   true = есть, false = нет

 int brightness[3];	  // яркость(+1 - поворот на 1 деление по часовой, -1 поворот на одно деление против часовой). [0] - MFI1  [1] - MFI2  [3] - MFI3
 bool brightness_button[3]; // непонятная кнопка на регуляторе яркости (значение принимаем, но пока не отрабатываем)

 int indik_internal[3];   // вращение внутренней кремальеры на ИНДИК (-1 против часовой/+1 по часовой) - (значение принимаем, но пока не отрабатываем)
 int indik_external[3];   // вращение внешней кремальеры на ИНДИК (-1 против часовой/+1 по часовой) - (значение принимаем, но пока не отрабатываем)
 bool indik_button[3];	  // непонятная кнопка на кремальере ИНДИК - (значение принимаем, но пока не отрабатываем)
 
 bool Otkaz_35;			  // отсутствие индикации о гиромагнитном курса на МФИ
 bool Otkaz_37;			  // ПРОПАДАНИЕ ИНФОРМАЦИИ О ТЕКУЩИХ ЗНАЧЕНИЯХ УГЛА АТАКИ И ПЕРЕГРУЗКИ В КАДРАХ ПЛТ И ПЛТ2 (АВАР)
 bool Otkaz_40;           // САМОПРОИЗВОЛЬНОЕ ИЗМЕНЕНИЕ РЕЖИМА ИНДИКАЦИИ
 bool Otkaz_47;           // ПРОПАДАНИЕ ИНДИКАЦИИ НА ЭКРАНАХ  
 bool Otkaz_95;           // ПРОПАДАНИЕ ИНФОРМАЦИИ О ВЫСОТНО-СКОРОСТНЫХ ПАРАМЕТРАХ
 bool Otkaz_117;          // ОТСУТСТВИЕ ВОЗМОЖНОСТИ ВЫБОРА РЕЖИМА ИНДИКАЦИИ
 bool Otkaz_179;          // ПРОПАДАНИЕ ИНФОРМАЦИИ О ПАРАМЕТРАХ ПРОСТРАНСТВЕННОГО ПОЛОЖЕНИЯ
 
 bool Buttons_FK[13][3];  // кнопки ФК  МФИ ([0] = 1 ПИЛОТ, [1] = ЦЕНТР, [2] = 2 ПИЛОТ) - заложено на 1 больше, чтобы не путаться с ТЗ
 bool Buttons_MFK[29][3]; // кнопки МФК  МФИ ([0] = 1 ПИЛОТ, [1] = ЦЕНТР, [2] = 2 ПИЛОТ) - заложено на 1 больше, чтобы не путаться с ТЗ
 
 double lat_r;			  // широта в десятичной системе, которую должен отдавать Осколков
 double lon_r;			  // долгота в десятичной системе, которую должен отдавать Осколков

 bool pr_begin;		  	  //признак начала тренировки
 bool pr_begin_engine;    //признак перезапуска тренировки без остановки двигателя
 
 bool marshrut_stu;		  //что выделять в МЕНЮ в кадре НВГ-П (true - ПУТ, false - МАРШ)
 
 //для построения маршрута в кадре НВГ-П
 bool need_update_marshrut; //признак необходимости принудительного перестроения маршрута/коробочки (true - нужно перестроить, false - перестройка не требуется)
							//отработка происходит однократно, для повторной прорисовке надо сначала послать false (обнулить у меня), и только потом true

 int system_info_marshrut[6]; //системная информация для построения маршрута. если [0] = 1 - требуется маршрут, если 2 - коробка
							  //[1] - число точек в маршруте
							  //[2] - номер точки НАЧАЛА исполняемого участка (для выделения отрезка фиолетовым цветом)
							  //[3] - номер точки КОНЦА исполняемого участка (для выделения отрезка фиолетовым цветом)
							  //[4] - ID точки из исполняемого НТ (см. ниже в points_coord [2] варианты значений) для перекрашивания исполняемой точки в фиолетовый цвет
							  //[5] - номер точки до которой рисуем линию от ЛА до НТ (из массива marshrut_coord) (если меньше 0, то не рисуем вообще!!!!!)
 
 bool pr_marshrut_coord[12];  //признак использовать ли точку из массива marshrut_coord[180][2] для построения маршрута. true = да / false = нет

 int pr_vpp; 				  //1 - показываем в НТ согласно таблице ОНИ .. 2 - показываем лейбл ВПП .. 3 - делаем пусто
							  
 double marshrut_coord[180][2]; //[0] - координата X в десятичном формате для построения маршрута/коробки
								//[1] - координата Y в десятичном формате для построения маршрута/коробки
							  
 double points_coord[12][5];  //[0] - координата X в десятичном формате для навигационных точек
							  //[1] - координата Y в десятичном формате	для навигационных точек	
							  //[2] - ID города для рисования нужного лейбла:
							  //      0 - 4Й-РАЗВ262
							  //      4 - АРКАДАК
							  //      8 - БАЙКА
							  //      12 - БАКУРЫ
							  //      16 - БАЛАШОВ
							  //      20 - БПРМ-178
							  //      24 - БПРМ-262
							  //      28 - БПРМ-358
							  //      32 - БПРМ-82
							  //      36 - ВАРВАРИНО 
							  //      40 - ДПРМ-178
							  //      44 - ДПРМ-262
							  //      48 - ДПРМ-358
							  //      52 - ДПРМ-82
							  //      56 - ЕКАТЕРИНОВ
							  //      60 - ЕЛАНЬ
							  //      64 - ЖИЗНЕННАЯ
							  //      68 - ИНДУСТРИАЛ
							  //      72 - КАМЕНКА
							  //      76 - КОЛЕНО
							  //      80 - КОЛЫШЛЕЙ						  
							  //      84 - КР-ЗНАМЯ
							  //      88 - НОВОСЕЛОВ
							  //      92 - ПЕРЕВЕСИНКА
							  //      96 - ПОРОГ-178							  
							  //      100 - ПОРОГ-262 
							  //      104 - ПОРОГ-358
							  //      108 - ПОРОГ-82
							  //      112 - ПЯША							  
							  //      116 - РТИЩЕВО
							  //      120 - СЕМЕНОВКА
							  //      124 - СТУДЕНКА
							  //      128 - УСТЬ-ЩЕРБЕДИНО							  
							  //      132 - ХОВАНЩИНА
							  //	  136 - ХОТЯНОВО
							  //	  140 - ЧИГАНАК
							  //	  144 - АРАМИЛЬ
							  //	  148 - КОТЕЛЬНИК
							  //	  152 - КУБИНКА
							  //	  156 - МОРОЗОВСК
							  //	  160 - СЫЗРАНЬ
							  //      164 - УЛЬЯНОВСК	
							  //	  168 - 1ТР 
							  //      169 - 2ТР
							  //	  170 - 3ТР
							  //	  171 - 4ТР	
							  //	  172 - ПУСТО	
							  //	  173 - ПРС (используется в коробочках для вывода НТ)
							  //	  176 - ТИСОР
							  //	  180 - БОРИСОГЛЕБСК
							  //	  184 - ЛУГИЛ
							  //      188 - ЕРНИД
							  //      200 - точка НЕ используется при построении, пропускать ее
							  //	  301 - ПИЛОТАЖНАЯ ЗОНА 1 //пусто
							  //      302 - ПИЛОТАЖНАЯ ЗОНА 2
							  //	  303 - ПИЛОТАЖНАЯ ЗОНА 3
							  //	  304 - ПИЛОТАЖНАЯ ЗОНА 4	
							  //	  305 - ПИЛОТАЖНАЯ ЗОНА 5 
							  //      306 - ПИЛОТАЖНАЯ ЗОНА 6
							  //[3] - ID точки которую надо изобразить для рисования около лейбла: 
							  //	  0 - красный аэродром ДЛЯ РТИЩЕВО (символ аэродрома)
							  //	  1 - фиолетовый аэродром ДЛЯ РТИЩЕВО (символ аэродрома находящегося на исполнении)
							  //      2 - фиолетовый круг (символ исполняемого ППМ)
							  //      3 - голубой круг (символ НЕ исполняемого ППМ)
							  //	  4 - фиолетовая цель (символ исполняемого ППМ-цели)
							  //	  5 - голубая цель (символ НЕ исполняемого ППМ-цели)
							  //	  6 - фиолетовый круг с черной заливкой по центру (символ исполняемого ППМ)
							  //	  7 - голубой круг с черной заливкой по центру (символ НЕ исполняемого ППМ)
							  //	  8 - фиолетовая цель с черной заливкой по центру (символ исполняемого ППМ-цели)
							  //	  9 - голубая цель с черной заливкой по центру (символ НЕ исполняемого ППМ-цели)
							  //	  10 - БПРМ красный
							  //	  11 - пустой
							  //	  12 - красный аэродром для БАЛАШОВА
							  //      13 - фиолетовый аэродром для БАЛАШОВА
							  //      14 - значок геоточки  // полет на геоточку (на зону пусто = 11 )
							  //	  15 - красный аэродром для БОРИСОГЛЕБСКА
							  //	  16 - фиолетовый аэродром для БОРИСОГЛЕБСКА

							  //[4] - способ прохода точки (ЛУР = 1, ПРХД = 2, ЗАХД = 3) - ВРЕМЕННО НЕ ИСПОЛЬЗУЕТСЯ - НА БУДУЩЕЕ
							  
 int table_chast_info_zk;			//ЗК для города
 int table_chast_info_zpu;			//ЗПУ для города
 int table_chast_info_fpu;			//ФПУ для города
 int table_chast_info_lbu;			//ЛБУ для города
 int table_chast_info_spnt;			//1-лур  2-проход  3-заход
							  
 int table_oni_zpu[12];		//ЗПУ в градусах
 int table_oni_s[12];		//S отрезка в метрах
 int table_oni_t_uch[12];	//время прохождения участка в секундах
 
 int t_pol;					//время полета в секундах
 int t_sekundomer;			//время секундомера в секундах
 
 bool pr_npi_posadka;	    //признак для принудительного включения белой жирной стрелки ЗПУ в режиме посадка в кадрах ПЛТ и ПЛТ-АВАРИЙНЫЙ (true - вкл, false - выкл)
 bool pr_finish_marshrut;   //признак прохождения последней точки в коробке (4ТР), либо последней точки маршрута (true - прошел, false - не прошел)
 bool show_violet_lbu;      //показывать фиолетовую планку ЛБУ на НПИ в кадре ПЛТ и ПЛТ-АВАР (true - показывать, false - не показывать).
 int color_vysotomer_error; //цвет на высотомере в кадрах ПЛТ и ПЛТ-АВАР (0 - стандартная серая подложка, 1 - мигание желтым, 2 - мигание красным).
 
 int pilot_zones_kurs[10]; 		//сюда выдаем значения для колонки КУРС в кадре ПИЛОТАЖНЫЕ ЗОНЫ в градусах
 float pilot_zones_dalnost[10]; //сюда выдаем значения для колонки ДАЛЬНОСТЬ в кадре ПИЛОТАЖНЫЕ ЗОНЫ в метрах
								//0 - №1, 1 - №2, 2 - №3, 3 - №4, 4 - №5, 5 - №6
 
 int geopoints_kurs[40]; 		//сюда выдаем значения для колонки КУРС в кадре ГЕОТОЧКИ в градусах
 float geopoints_dalnost[40];   //сюда выдаем значения для колонки ДАЛЬНОСТЬ в кадре ГЕОТОЧКИ в метрах
								//0 - АРКАДАК, 1 - БАЙКА, 2 - БАКУРЫ, 3 - ВАРВАРИНО, 4 - ЕКАТЕРИНОВКА, 5 - ЕЛАНЬ, 6 - ЖИЗНЕННАЯ
 
 bool priority_white_zpu;       //принудительное включение широкой белой стрелки ЗПУ на ИНП (true - режим включен, false - режим выключен)
 float priority_white_zpu_value;//значение для широкой белой стрелки ЗПУ, которая включается принудительно
 
 bool pr_big_korobka;		//признак принудительного перехода с малой коробки на большую (подает Пиксайкин). сохраняются все остальные параметры
							//коробки, но меняется малая на большую коробку и соответственно номер маршрута тоже меняется на новый

 bool null_marshrut;		//true - принудительный сброс переменной nomer_marshruta в значение ID = 19, 
							//false - значение переменной nomer_marshruta устанавливается стандартным способом, выбором на МФИ
							
 bool priority_ARK;         //перехватить управление выбором Д/Б АРК (true - да, false - нет, по умолчанию с МФИ)
 bool priority_ARK_tek;	    //значение текущего АРК при перехвате управления (1= ДАЛЬНИЙ, 0=БЛИЖНИЙ)
 bool switch_ARK_D_to_B;	//принудительное переключение АРК с Д на Б
 
 bool begin_marshrut;		//признак того что мы находимся в начале маршрута (посылать сюда true, пока не достигли второй точки!)
 
 bool show_bkv;				//показывать не показывать окно выставка БКВ
 int mode_bkv1;				//состояние БКВ1, 0 - ОТКАЗ, 1 - ВЫСТАВКА, 2 - ГОТОВ
 int mode_bkv2;				//состояние БКВ2, 0 - ОТКАЗ, 1 - ВЫСТАВКА, 2 - ГОТОВ
 int mode_bkv3;				//состояние БКВ3, 0 - ОТКАЗ, 1 - ВЫСТАВКА, 2 - ГОТОВ
 
 int marshrut_spnt;			//что выделять в МЕНЮ в кадре НВГ-П (0 - ЛУР, 1 - ПРХД, 2 - ЗАХД)
 
 bool green_ramka_on_boot;  //показывать пустой черный экран с зеленой рамкой (без признака Power_MFI[1-3] = true - НЕ РАБОТАЕТ!!!)
 
 bool radio_h_otkaz;		//отказ радиовысотомера (true - значение радиовысоты закрыто крестиком, false - нет отказа)
}SH_MFI_IN;

//-----------------------------------------------
//МФПУ 2 ШТУКИ НА ПРИЕМ
typedef struct
{
 bool Otkaz_Ethernet1; // Отказ Ethernet №1
 bool Otkaz_Ethernet2; // Отказ Ethernet №2

 bool Power_MFPU1;     // (1 - ЕСТЬ ПИТАНИЕ НА МФПУ1)
 bool Power_MFPU2;     // (1 - ЕСТЬ ПИТАНИЕ НА МФПУ2)

 bool Buttons[74][2];  // кнопки  МФПУ ([0] = 1 ПИЛОТ, [1] = 2 ПИЛОТ)

 bool Tumbler_ARK;     // АРК МФИ = 1, АРК ПУ =0

 bool Got_PNS1;        // Исправность ПНС 1
 bool Got_PNS2;        // Исправность ПНС 2
 bool Got_PNS3;        // Исправность ПНС 3
 bool Got_ICI1;        // Исправность ИЦИ 1
 bool Got_ICI2;        // Исправность ИЦИ 2
 bool Got_ICI3;        // Исправность ИЦИ 3
 bool Got_MFPU1;       // Исправность МФПУ 1
 bool Got_MFPU2;       // Исправность МФПУ 2
 bool Got_CVISU;       // Исправность ЦВ ИСУ
 bool Got_MMK;         // Исправность ММК
 bool Got_DT;          // Исправность ДТ
 bool Got_BUR410;      // Исправность БУР-410
 bool Got_RPD410;      // Исправность РПД-410
 bool Got_EBN410;      // Исправность ЭБН-410

 bool Got_BINS;        // Исправность БИНС
 bool Got_BSOI1;       // Исправность БСОИ №1 
 bool Got_BSOI2;       // Исправность БСОИ №2 
 bool Got_SVS1;        // Исправность СВС 1
 bool Got_SVS2;        // Исправность СВС 2
 bool Got_RV;          // Исправность радиовысотомера
 bool Got_VIM95;       // Исправность VIM-95 
 bool Got_DME;         // Исправность DME
 bool Got_RSBN;        // Исправность РСБН
 bool Got_ARK;         // Исправность АРК
 bool Got_METEO;       // Исправность метеолокатора   
 bool Got_SO2010;      // Исправность УВД СО-2010
 bool Got_ESGO;        // Исправность ЕСГО 4203-15 
 bool Got_SAU;         // Исправность САУ
 bool Got_PRIMA_DMV1;  // Исправность ПРИМА-ДМВ 1    
 bool Got_PRIMA_DMV2;  // Исправность ПРИМА-ДМВ 2    
 bool Got_PRIMA_KV;    // Исправность ПРИМА-КВ

 bool Dat_BKV1;        // Исправность БКВ 1 
 bool Dat_BKV2;        // Исправность БКВ 2 
 bool Dat_BKV3;        // Исправность БКВ 3 
 bool Dat_SNS1;        // Исправность СНС 1 
 bool Dat_SNS2;        // Исправность СНС 2 
 bool Dat_SNS3;        // Исправность СНС 3 
 bool Dat_SVS1;        // Исправность СВС 1  
 bool Dat_SVS2;        // Исправность СВС 2 
 bool Dat_SVS3;        // Исправность СВС 3 
 bool Dat_MMK;         // Исправность ММК 
 bool Dat_DT;          // Исправность ДТ 

 int main_PNS;         // 0 = нет ведущих ПНС, 1 = ПНС 1, 2 = ПНС 2, 3 = ПНС 3     
 int main_BKV;         // 0 = нет ведущих БКВ, 1 = БКВ 1, 2 = БКВ 2, 3 = БКВ 3
 int main_SNS;         // 0 = нет ведущих СНС, 1 = СНС 1, 2 = СНС 2, 3 = СНС 3
 int main_SVS;         // 0 = нет ведущих СВС, 1 = СВС 1, 2 = СВС 2, 3 = СВС 3 
 int bkv_avt;		   // 0 - надпись «АВТ1» на зеленой подложке;
					   // 1 - надпись «АВТ2» на зеленой подложке;
					   // 2 - надпись «АВТ3» на зеленой подложке;
					   // 3 - надпись «АВТ» без зеленой подложки;
					   // 4 - надпись «АВТ», цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.

 int bkv1;			   // 0 - надпись «БКВ1» на зеленой подложке;
					   // 1 - надпись «БКВ1» без зеленой подложки;
					   // 2 - надпись «БКВ1» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.

 int bkv2;			   // 0 - надпись «БКВ2» на зеленой подложке;
					   // 1 - надпись «БКВ2» без зеленой подложки;
					   // 2 - надпись «БКВ2» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.

 int bkv3;			   // 0 - надпись «БКВ3» на зеленой подложке;
					   // 1 - надпись «БКВ3» без зеленой подложки;
					   // 2 - надпись «БКВ3» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.					   

 int svs_avt;		   // 0 - надпись «АВТ1» на зеленой подложке;
					   // 1 - надпись «АВТ2» на зеленой подложке;
					   // 2 - надпись «АВТ3» на зеленой подложке;
					   // 3 - надпись «АВТ» без зеленой подложки;
					   // 4 - надпись «АВТ», цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.
					   
 int svs1;			   // 0 - надпись «СВС1» на зеленой подложке;
					   // 1 - надпись «СВС1» без зеленой подложки;
					   // 2 - надпись «СВС1» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.

 int svs2;			   // 0 - надпись «СВС2» на зеленой подложке;
					   // 1 - надпись «СВС2» без зеленой подложки;
					   // 2 - надпись «СВС2» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.

 int svs3;			   // 0 - надпись «СВС3» на зеленой подложке;
					   // 1 - надпись «СВС3» без зеленой подложки;
					   // 2 - надпись «СВС3» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.	

 int sns_avt;		   // 0 - надпись «АВТ1» на зеленой подложке;
					   // 1 - надпись «АВТ2» на зеленой подложке;
					   // 2 - надпись «АВТ3» на зеленой подложке;
					   // 3 - надпись «АВТ» без зеленой подложки;
					   // 4 - надпись «АВТ», цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.
					   
 int sns1;			   // 0 - надпись «СНС1» на зеленой подложке;
					   // 1 - надпись «СНС1» без зеленой подложки;
					   // 2 - надпись «СНС1» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.

 int sns2;			   // 0 - надпись «СНС2» на зеленой подложке;
					   // 1 - надпись «СНС2» без зеленой подложки;
					   // 2 - надпись «СНС2» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.

 int sns3;			   // 0 - надпись «СНС3» на зеленой подложке;
					   // 1 - надпись «СНС3» без зеленой подложки;
					   // 2 - надпись «СНС3» - цвет шрифта белый как у кнопки «БИНС», без зеленой подложки.	

 double ARK_KUR;       // АРК КУР (0+360 ГРАД)

 double RSBN_AZIMUT;   // Азимут (ГРАД) РСБН 
 double RSBN_DALN;     // Дальность (KM) РСБН

 // для вкладки ЛТХ
 double Dal_pol;          // дальность полета текущий режим полета

 double Vprib_max_dal;    // v приб режим макс дальности
 double Max_dal;          // макс дальность
 int T_pol_max_dal;       // время полета режим макс дальности

 double Vprib_max_prod;   // v приб режим макс продолжительности
 double Dal_pol_max_prod; // дальность полета
 int T_max_prod;          // макс продолжительность

}SH_MFPU_IN;


//Кадр - ПИЛОТАЖ
typedef struct
{
//Командно-пилотажный индикатор
 float Kren;		//Крен
 float Tangage;		//Тангаж
 float Index_Horizont;	//Индекс отклонения от заданной траектории по высоте
 float Index_Vertical;	//Индекс бокового уклонения от заданной траектории
 float Sharik;		//Индикатор скольжения  (значения -1..0..1)
 float Radio_H;		//Счетчик радиовысотомера
 float Direct_Horizont; //Директорная планка по горизонтали  (значения -1..0..1)
 float Direct_Vertical; //Директорная планка по вертикали  (значения -1..0..1)

 float Vvert;		//Скорость вертикальная	

 float Xa;		//расстояние Xa в км
 float Za;		//расстояние Za в км
 float psi_land;        //посадочный курс у аэродрома
 int aero_tek;		//0 - БАЛАШОВ, 1 - РТИЩЕВО, 2 - БОРИСОГЛЕБСК 

//признаки отсутствия достоверных данных
 bool No_Kren_Tangage;	//признак отсутствия достоверных данных по крену или тангажу
 bool No_Sharik;	//признак отсутствия достоверных данных о скольжении шарика (1-шарик не отображается см. ЛИО стр.76, 0-шарик отображается)
 bool No_Index;		//признак отсутствия индексов Index_otkl_H и Index_ukl_T
 bool No_Radio_H;	//признак отсутствия достоверных данных по радиовысоте 
 bool Blenker_K;	//готовность бленкера курса (true - готов, false - не готов)
 bool Blenker_G;	//готовность бленкера глиссады (true - готов, false - не готов)
 bool Show_Blenker_K;	//показывать планку курса (true - показывать, false - скрывать)
 bool Show_Blenker_G;	//показывать планку глиссады (true - показывать, false - скрывать) 
 int Blenker_K_color;	//0 - голубой, 1 - зеленый, 2 - янтарный
 int Blenker_G_color;	//0 - голубой, 1 - зеленый, 2 - янтарный
 
 int TKMS;		//Табло индикации режима счисления (№2 стр.70)  0=КВР, 1=СНС, 2=РСБН, 3=VOR
 float Hbar;		//Барометрическая высота

 float Ukv1;		//частота рабочего канала РС ПРИМА-ДМВ1
 float Ukv2;		//частота рабочего канала РС ПРИМА-ДМВ2
 float Kv;		//частота рабочего канала РС ПРИМА-КМВ
 bool Otkaz_ukv1;	//отказ УКВ1 (1 - режим отказ ВКЛ, 0 - ВЫКЛ)
 bool Otkaz_ukv2;	//отказ УКВ2 (1 - режим отказ ВКЛ, 0 - ВЫКЛ)
 bool Otkaz_kv;		//отказ КВ (1 - режим отказ ВКЛ, 0 - ВЫКЛ)
 bool Kontrol_ukv1;	//контроль УКВ1 (1 - режим контроль ВКЛ, 0 - ВЫКЛ)
 bool Kontrol_ukv2;	//контроль УКВ2 (1 - режим контроль ВКЛ, 0 - ВЫКЛ)
 bool Kontrol_kv;	//контроль КВ (1 - режим контроль ВКЛ, 0 - ВЫКЛ)

 float Distance;	//Дальность (в км) для индикатора активной НТ
 bool Dprm;		//Признак прохождения ДПРМ (1-пройден, 0-не пройден)

//Индикатор навигационно-плановый (ИНП)
 float Magnit_kurs;	//Магнитный курс(в градусах)
 float Index_FPU;	//индекс ФПУ (фактический путевой угол)(в градусах)
 float RM_RSBN;		//Стрелочный указатель пеленга РМ РСБН (в градусах)
 float KUR_ARK;		//Стрелочный указатель КУР АРК(в градусах)  //НЕ ИСПОЛЬЗУЕТСЯ БЕРУТСЯ иЗ СТРУКТУРЫ МФПУ
 float LBU;		//линия бокового уклонения ЛБУ, расстояние в метрах, минус самолет слева от линии, плюс самолет справа от линии
 float Kur_D;		//частота ДПРС АРК  //НЕ ИСПОЛЬЗУЕТСЯ БЕРУТСЯ иЗ СТРУКТУРЫ МФПУ
 float Kur_B;		//частота БПРС АРК  //НЕ ИСПОЛЬЗУЕТСЯ БЕРУТСЯ иЗ СТРУКТУРЫ МФПУ

 int Mode_ARK;		//1-отказ АРК , 2-нет достоверных данных АРК, 3-АРК режим контроль, 4 - управление от штатного ПУ, 0-по умолчанию, 5 - режим контроль с недостоверными данными (КОНТР + крестик)
 int Mode_RSBN;		//1-режим навигация  2-режим посадка 3-режим отказ  4-контроль, 5 - режим контроль + отсутствие достоверной инф. по азимуту, 6 - режим контроль + отсутствие инфы по азимуту и дальности
 bool finish_control_RSBN;  //признак окончания режима КОНТРОЛЬ РСБН (true - финиш)
 bool finish_control_ARK;   //признак окончания режима КОНТРОЛЬ АРК (true - финиш)
 float D_RSBN_km;	//значение наклонной дальности до РСБН (в километрах)
 int RSBN_Work_Ch;	//номер рабочего канала РСБН
 int RSBN_Reserve_Ch;	//номер резервного канала РСБН

 float VPrib;		//приборная скорость в км/ч
 float Vist;		//истинная скорость в км/ч
 float Vput;		//Путевая скорость в км/ч
 float Ax;		//Текущее продольное ускорение

 float Rmd_Left;	//крутящий момент левого двигателя (в %)
 float Rmd_Right;	//крутящий момент правого двигателя (в %)

 float Ny;		//Перегрузка
 float Alfa;		//Угол атаки
 float Alfa_min;	//Критический угол атаки min
 float Alfa_max;	//Критический угол атаки max

//признаки отсутствия достоверных данных
 bool No_Magnit_Kurs;	//признак отсутствия достоверных данных по магнитному курсу (1-нет достоверных данных / 0-данные достоверные)
 bool No_Zad_Kurs;	//признак отсутствия достоверных данных по ЗК (1-нет достоверных данных / 0-данные достоверные)
 bool No_Zad_PU;	//признак отсутствия достоверных данных по ЗПУ (1-нет достоверных данных / 0-данные достоверные)
 bool No_RM_RSBN;	//признак отсутствия достоверных данных по РМ РСБН (1-нет достоверных данных / 0-данные достоверные)
 bool No_Azimut_RSBN;   //признак отсутствия достоверных данных по азимуту РСБН (1-нет достоверных данных / 0-данные достоверные)
 bool No_Distance_RSBN; //признак отсутствия достоверных данных по дальности РСБН (1-нет достоверных данных / 0-данные достоверные)

//отказы
 bool Otkaz_ARK;	//отказ КУР АРК (true - отказ, false - отказа нет)

 bool Rezhim_zk_hand;	//режим ЗК->РУЧНОЙ если true, ЗК->АвТОМАТ если false
 
 bool Show_sector_H;    //показывать или нет сектор допустимых значений +-60 от заданной Н на высотомере (true - показывать, false - не показывать).
 
 bool Show_RSBN;	//показывать или нет зеленую стрелку РСБН на НПИ (true - да, false - нет)
 bool Show_ARK;		//показывать или нет желтую стрелку АРК на НПИ (true - да, false - нет)
}SH_MFI_PILOTAZH_IN;

//Кадр - СИСТЕМА-КОНФ
typedef struct
{
 bool shassi_lamp[6];	//0-лев красное, 1-центр красное, 2-прав красное, 3-лев зеленое, 4-центр зеленое, 5-прав зеленое
 bool shassi_obzhato;   //Шасси обжато (1-да, 0-нет)

 bool zakrylki_0_left;	//закрылки в положении "убраны" (true - да, false - нет)
 bool zakrylki_18_left;	//закрылки в положении "взлет" (true - да, false - нет)
 bool zakrylki_42_left;	//закрылки в положении "посадка" (true - да, false - нет)
 bool zakrylki_0_right;	//закрылки в положении "убраны" (true - да, false - нет)
 bool zakrylki_18_right;//закрылки в положении "взлет" (true - да, false - нет)
 bool zakrylki_42_right;//закрылки в положении "посадка" (true - да, false - нет)

 float Rul_napravlen;	//положение угла отклонения руля направления (в градусах от -17 до 17)
 float Rul_vys_L;	//положение угла отклонения руля высоты ЛЕВ (в градусах)
 float Rul_vys_R;	//положение угла отклонения руля высоты ПРАВ (в градусах)
 bool Intercept_L;	//интерцептор левый (1-показывать, 0-не показывать)
 bool Intercept_R;	//интерцептор правый (1-показывать, 0-не показывать)
 float Eleron_left;	//положение левого элерона (в градусах)
 float Eleron_right;	//положение правого элерона (в градусах)
 float Trimmer_RN;	//триммер руля направления
 float Trimmer_RV;	//триммер руля высоты
 float Trimmer_EL;	//триммер элеронов
 float P_torm_left;	//индикатор давления в гидравлической системе тормозов ЛЕВ
 float P_torm_right;	//индикатор давления в гидравлической системе тормозов ПРАВ
 float P_stoyan_torm;	//индикатор давления в контуре стояночного тормоза
 float P_sovmes_left;	//совмещенный индикатор давления гидравлической системы в основном контуре и контуре тормозов ЛЕВ
 float P_sovmes_right;	//совмещенный индикатор давления гидравлической системы в основном контуре и контуре тормозов ПРАВ
 float T_vozduh;	//индикатор температуры наружного воздуха
 bool No_T_vozduh;  //отсутствие достоверных данных по температуре наружного воздуха (крестик)
 float T_otoplenia;	//индикатор температуры воздуха отопления
 float T_pass_cabine;	//индикатор температуры воздуха в пассажирской кабине
 float V_vetra;		//скорость ветра в м/c для кадра НВГ-П 15.06.2021 НОВЫЙ!!! 
 float Naprav_vetra;	//направление ветра в градусах для кадра НВГ-П 15.06.2021 НОВЫЙ!!!
 bool G_post_tok;	//наличие напряжения генератора постоянного тока 27В (1-есть, 0-нет)
 bool Preob_26v;	//наличие напряжения преобразователя 26В (1-есть, 0-нет)
 bool Preob_36v;	//наличие напряжения преобразователя 36В (1-есть, 0-нет)
 bool G_perem_tok; 	//наличие напряжения генератора переменного тока 115В (1-есть, 0-нет)

 float Gt_left;		//часовой расход топлива левого двигателя (кг/ч)
 float Gt_right;	//часовой расход топлива правого двигателя (кг/ч)
 float G_summa;		//суммарное количество топлива ЛЕВЫЙ+ПРАВЫЙ баки (кг)
 float G_summa_left;	//суммарное количество топлива в ЛЕВОЙ системе баков (кг)
 float G_summa_right;	//суммарное количество топлива в ПРАВОЙ системе баков (кг)
 
 float GG_left;		//обороты левого газогенератора в %
 float GG_right;	//обороты правого газогенератора в %
 float TMT_left;	//температура между турбинами двигателей ЛЕВ
 float TMT_right;	//температура между турбинами двигателей ПРАВ
 float T_masl_left;	//температура масла левой системы
 float T_masl_right;	//температура масла правой системы
 float P_masl_left;	//индикатор давления масла в левой системе
 float P_masl_right;	//индикатор давления масла в правой системе
 float P_topl_left;	//индикатор давления в левой топливной системе
 float P_topl_right;	//индикатор давления в правой топливной системе
 float VV_left;		//индикатор оборотов воздушного винта левый (используется в кадре аварийного пилотажа)
 float VV_right;	//индикатор оборотов воздушного винта правый (используется в кадре аварийного пилотажа)

 bool No_verify_data;	//отсутствие достоверных данных
}SH_MFI_SYSTEM_KONF_IN;

//Кадр - СИСТЕМА-КОНФ-ИНФ  
typedef struct
{
//у всей подструктуры true - есть ошибка, false - нет ошибки
 bool VoiceInfo[100]; // Сообщения речевого информатора (1 = сообщение пришло)
// VoiceInfo[xx]
// [0] - ПОЖАР ЛЕВОГО ДВИГАТЕЛЯ						pr_pozhar_left_engine       
// [1] - ПОЖАР ПРАВОГО ДВИГАТЕЛЯ					pr_pozhar_right_engine
// [2] - ПОЖАР БАГАЖНОГО ОТСЕКА						VoiceInfo[2]
// [3] - УГОЛ АТАКИ ПРЕДЕЛЬНЫЙ						pr_sryv_planer
// [4] - ПЕРЕГРУЗКА ПРЕДЕЛЬНАЯ						VoiceInfo[4]	
// [5] - СКОРОСТЬ ПРЕДЕЛЬНАЯ						VoiceInfo[5]	
// [6] - ОТКАЗ ДВУХ ГЕНЕРАТОРОВ. СЕТЬ НА АКБ				VoiceInfo[6]
// [7] - ВЫСОТА ОПАСНАЯ							VoiceInfo[7]
// [8] - АККУМУЛЯТОР ОТКАЗ. СМОТРИ СЭС					pr_akkum_elektro_planer
// [9] - АККУМУЛЯТОР №1 ПЕРЕГРЕВ					pr_peregrev_ak1_obogrev
// [10] - АККУМУЛЯТОР №2 ПЕРЕГРЕВ					pr_peregrev_ak2_obogrev
// [11] - СКОРОСТЬ МАЛА							VoiceInfo[11]
// [12] - ДАВЛЕНИЕ МАСЛА ЛЕВОГО МАЛО, СБРОСЬ ОБОРОТЫ ЛЕВОГО 		pr_davl_masla_left_engine
// [13] - ДАВЛЕНИЕ МАСЛА ПРАВОГО МАЛО, СБРОСЬ ОБОРОТЫ ПРАВОГО		pr_davl_masla_right_engine
// [14] - ДАВЛЕНИЕ ТОПЛИВА ЛЕВОГО МАЛО					pr_davl_topl_left_engine
// [15] - ДАВЛЕНИЕ ТОПЛИВА ПРАВОГО МАЛО					pr_davl_topl_right_engine
// [16] - ТЕМПЕРАТУРА ЛЕВОГО МАКСИМАЛЬНАЯ, СБРОСЬ ОБОРОТЫ ЛЕВОГО 	VoiceInfo[16]
// [17] - ТЕМПЕРАТУРА ПРАВОГО МАКСИМАЛЬНАЯ, СБРОСЬ ОБОРОТЫ ПРАВОГО	VoiceInfo[17]
// [18] - ДАВЛЕНИЕ МАСЛА ЛЕВОГО ВЕЛИКО					VoiceInfo[18]
// [19] - ДАВЛЕНИЕ МАСЛА ПРАВОГО ВЕЛИКО					VoiceInfo[19]
// [20] - ТЕМПЕРАТУРА МАСЛА ЛЕВОГО ДВИГАТЕЛЯ ПРЕДЕЛЬНАЯ			VoiceInfo[20]
// [21] - ТЕМПЕРАТУРА МАСЛА ПРАВОГО ДВИГАТЕЛЯ ПРЕДЕЛЬНАЯ		VoiceInfo[21]
// [22] - ДВИГАТЕЛЬ ЛЕВЫЙ НЕ ЗАПУСКАЙ					VoiceInfo[22]
// [23] - ДВИГАТЕЛЬ ПРАВЫЙ НЕ ЗАПУСКАЙ 					VoiceInfo[23]
// [24] - АВТОПИЛОТ ОТКАЗ						pr_ap_otkaz_obogrev
// [25] - ДВЕРИ НЕ ЗАКРЫТЫ						pr_dver_planer
// [26] - ЭЛЕКТРОСНАБЖЕНИЕ ПРОВЕРЬ (ОТКАЗ ГЕНЕРАТОРА 28 ВОЛЬТ ЛЕВОГО)	pr_gen_dc_left_elektro_planer
// [27] - ЭЛЕКТРОСНАБЖЕНИЕ ПРОВЕРЬ (ОТКАЗ ГЕНЕРАТОРА 28 ВОЛЬТ ПРАВОГО)	pr_gen_dc_right_elektro_planer
// [28] - КРЕН ВЕЛИК  							VoiceInfo[28]
// [29] - ЭЛЕКТРОСНАБЖЕНИЕ ПРОВЕРЬ (ОТКАЗ ГЕНЕРАТОРА 115 ВОЛЬТ ЛЕВОГО)  pr_gen_ac_left_elektro_planer
// [30] - ЭЛЕКТРОСНАБЖЕНИЕ ПРОВЕРЬ (ОТКАЗ ГЕНЕРАТОРА 115 ВОЛЬТ ПРАВОГО)	pr_gen_ac_right_elektro_planer
// [31] - ОТКАЗ ДВУХ ПНС						VoiceInfo[31]
// [32] - ОТКАЗ ДВУХ БКВ						VoiceInfo[32]
// [33] - ОТКАЗ ПНС 3							VoiceInfo[33]
// [34] - ОТКАЗ БКВ 3							VoiceInfo[34]
// [35] - ОБЛЕДЕНЕНИЕ							pr_obled_elektro_planer
// [36] - ЗАКРЫЛКИ ПРОВЕРЬ						pr_zakrylki_18_elektro_planer
// [37] - ШАССИ ВЫПУСТИ							pr_vypusk_shassi_planer
// [38] - ШАССИ ПРОВЕРЬ							VoiceInfo[38]
// [39] - СБРОСЬ ОБОРОТЫ ЛЕВОГО	   (стружка левый двигатель)		pr_struzhka_left_engine
// [40] - СБРОСЬ ОБОРОТЫ ПРАВОГО   (стружка правый двигатель)		pr_struzhka_right_engine
// [41] - СБРОСЬ ОБОРОТЫ ЛЕВОГО	   (превышение параметров лев двиг)	pr_prev_par_engine_left
// [42] - СБРОСЬ ОБОРОТЫ ПРАВОГО   (превышение параметров прав двиг)	pr_prev_par_engine_right
// [43] - СБРОСЬ ОБОРОТЫ ВИНТА ЛЕВОГО					VoiceInfo[43]
// [44] - СБРОСЬ ОБОРОТЫ ВИНТА ПРАВОГО					VoiceInfo[44]
// [45] - АВАРИЙНЫЙ ОСТАТОК В ЛЕВОМ БАКЕ				pr_min_zapas_topl_left_engine
// [46] - АВАРИЙНЫЙ ОСТАТОК В ПРАВОМ БАКЕ				pr_min_zapas_topl_right_engine
// [47] - ВРЕМЯ ЗАПУСКА ВЫШЕ ДОПУСТИМОГО				VoiceInfo[47]
// [48] - ПЕРЕКАЧКУ ТОПЛИВА ВКЛЮЧИ					мне нужна разбивка, использовать надо [76] и [77]
// [49] - ОТКАЗ ПОС ВИНТА ЛЕВОГО					pr_pos_vinta_left_engine
// [50] - ОТКАЗ ПОС ВИНТА ПРАВОГО					pr_pos_vinta_right_engine
// [51] - ОТКАЗ ПНС 1							VoiceInfo[51]
// [52] - ОТКАЗ ПНС 2							VoiceInfo[52]
// [53] - ОТКАЗ БКВ 1							VoiceInfo[53]
// [54] - ОТКАЗ БКВ 2							VoiceInfo[54]
// [55] - ЭШЕЛОН ПРОВЕРЬ						VoiceInfo[55]
// [56] - ВЫСОТУ ПРОВЕРЬ						VoiceInfo[56]
// [57] - ПРОШЕЛ ЗАДАННУЮ ВЫСОТУ					VoiceInfo[57]
// [58] - ЛЕВЫЙ ДВИГАТЕЛЬ НА ИЗОЛИРУЮЩЕМ				pr_izolir_klapan_left_engine
// [59] - ПРАВЫЙ ДВИГАТЕЛЬ НА ИЗОЛИРУЮЩЕМ				pr_izolir_klapan_right_engine
// начиная с [70] нужны только Клопыжникову
// [70] - УРОВЕНЬ МАСЛА ЛЕВ МАЛО					VoiceInfo[70]
// [71] - УРОВЕНЬ МАСЛА ПРАВ МАЛО					VoiceInfo[71]
// [72] - ВЫСОТА > 4200							VoiceInfo[72]
// [73] - АККУМ №1 РАЗРЯД						VoiceInfo[73]
// [74] - АККУМ №2 РАЗРЯД						VoiceInfo[74]
// [75] - ЗАПУСК двигателей						VoiceInfo[75]
// [76] - ВКЛ ПЕРЕКАЧКУ ЛЕВОЙ системы топливных баков			VoiceInfo[76]
// [77] - ВКЛ ПЕРЕКАЧКУ ПРАВОЙ системы топливных баков			VoiceInfo[77]
// [78] - ТЕМП МАСЛА ЛЕВОГО ДВИГАТЕЛЯ МАЛА				VoiceInfo[78]
// [79] - ТЕМП МАСЛА ПРАВОГО ДВИГАТЕЛЯ МАЛА				VoiceInfo[79]
// [80] - СРАБАТЫВАНИЕ АНТИЮЗ ЛЕВ					VoiceInfo[80]
// [81] - СРАБАТЫВАНИЕ АНТИЮЗ ПРАВ					VoiceInfo[81]
// [82] - ВЫЗОВ ЭКИПАЖА							VoiceInfo[82]


 bool pr_pozhar_left_engine; 		//+пожар левого двигателя
 bool pr_davl_masla_left_engine; 	//+давление масла в левом двигателе
 bool pr_davl_topl_left_engine;		//+давление топлива в левом двигателе
 bool pr_min_zapas_topl_left_engine;	//+минимальный запас топлива в левом двигателе
 int pr_prev_par_engine_left;		//+превышены параметры левого двигателя (0 - серый, 1 - желтый, 2 красный)
 bool pr_struzhka_left_engine;		//+стружка левый двигатель
 bool pr_gidravl_left_engine;		//гидравл левый двигатель
 bool pr_filtr_masla_left_engine;	//фильтр масла левого двигателя
 bool pr_izolir_klapan_left_engine;	//+изолир клапан лев двиг
 bool pr_filtr_topl_left_engine;	//топливный фильтр левого двигателя
 bool pr_beta_diapazon_left_engine;	//бэта диапазон левого двигателя
 bool pr_pos_vinta_left_engine;		//+пос винта левого двигателя
 bool pr_gotov_ebo_left_engine;		//готов эбо левого двигателя
 bool pr_separ_lda_left_engine;		//включен сепаратор льда левого двигателя
 bool pr_avt_fluger_left_engine;	//включен авт флюгер левого двигателя
 bool pr_flug_nasos_left_engine;	//насос флюгера левого двигателя

 bool pr_zapusk_planer;			//запуск планер
 bool pr_vkl_left_perekach_planer;	//вкл лев перекачка топлива
 bool pr_perekach_topl_left_planer;	//перекачка топлива из левого
 bool pr_auk_left_planer;		//аук лев
 bool pr_fary_rulezh_planer;		//фары рулеж
 bool pr_dver_planer;			//+дверь
 bool pr_sryv_planer;			//+срыв
 bool pr_pozhar_bagazh_planer;		//пожар в багажном отделении
 bool pr_kolcevan_topl_planer;		//кольцевание топлива
 bool pr_vkl_right_perekach_planer;	//вкл прав перекачка топлива
 bool pr_perekach_topl_right_planer;	//перекачка топлива из правого
 bool pr_auk_right_planer;		//аук прав
 bool pr_fary_posad_planer;		//фары посадка
 bool pr_vypusk_shassi_planer;		//+выпуск шасси
 bool pr_interceptors_planer;		//интерцепторы
 bool pr_vyzov_planer;			//вызов

 bool pr_pozhar_right_engine; 		//+пожар правого двигателя
 bool pr_davl_masla_right_engine; 	//+давление масла в правом двигателе
 bool pr_davl_topl_right_engine; 	//+давление топлива в правом двигателе
 bool pr_min_zapas_topl_right_engine;	//+минимальный запас топлива в правом двигателе
 int pr_prev_par_engine_right;		//+превышены параметры правого двигателя (0 - серый, 1 - желтый, 2 красный)
 bool pr_struzhka_right_engine;		//+стружка правый двигатель
 bool pr_gidravl_right_engine; 		//гидравл правый двигатель
 bool pr_filtr_masla_right_engine;	//фильтр масла правого двигателя 
 bool pr_izolir_klapan_right_engine;	//+изолир клапан прав двиг 
 bool pr_filtr_topl_right_engine; 	//топливный фильтр правого двигателя
 bool pr_beta_diapazon_right_engine;	//бэта диапазон правого двигателя 
 bool pr_pos_vinta_right_engine;	//+пос винта правого двигателя 
 bool pr_gotov_ebo_right_engine; 	//готов эбо правого двигателя
 bool pr_separ_lda_right_engine; 	//включен сепаратор льда правого двигателя 0-выкл / 1-вкл/ 2-мигает
 bool pr_avt_fluger_right_engine; 	//включен авт флюгер правого двигателя
 bool pr_flug_nasos_right_engine; 	//насос флюгера правого двигателя	

 bool pr_psn_obogrev;			//включен обогрев ПСН
 bool pr_r_poln1_obogrev;		//включен обогрев приемника полного давления I (true - да, false-нет)
 bool pr_rst1_obogrev;			//включен обогрев приемника стат. давления I (true - да, false-нет)
 bool pr_r_poln2_obogrev;		//включен обогрев приемника полного давления II (true - да, false-нет)
 bool pr_rst2_obogrev;			//включен обогрев приемника стат. давления II (true - да, false-нет)
 bool pr_ap_otkaz_obogrev;		//+ап отказ
 bool pr_upor_vinta_left_obogrev;	//упор винта лев
 bool pr_upor_vinta_right_obogrev;	//упор винта прав
 bool pr_peregrev_ak1_obogrev;		//+перегрев аккумулятора №1 (true-да, false-нет)
 bool pr_peregrev_ak2_obogrev;		//+перегрев аккумулятора №2 (true-да, false-нет)

 bool pr_ottorm_left_elektro_planer;	//отторм лев
 bool pr_ottorm_right_elektro_planer;	//отторм прав
 int pr_preobr1_36v_elektro_planer;	//ИНФ ТАБЛО ячейка ПРЕОБР1 36В (0 - серый, 1 - желтый, 2 - красный)
 int pr_preobr2_36v_elektro_planer;	//ИНФ ТАБЛО ячейка ПРЕОБР2 36В (0 - серый, 1 - желтый, 2 - красный)
 int pr_preobr1_26v_elektro_planer;	//ИНФ ТАБЛО ячейка ПРЕОБР1 26В (0 - серый, 1 - желтый, 2 - красный)
 int pr_preobr2_26v_elektro_planer;	//ИНФ ТАБЛО ячейка ПРЕОБР2 26В (0 - серый, 1 - желтый, 2 - красный)
 int pr_gen_dc_left_elektro_planer;	//ИНФ ТАБЛО ячейка ГЕН ПОСТ ЛЕВ (0 - серый, 1 - желтый, 2 - красный)
 int pr_gen_dc_right_elektro_planer;//ИНФ ТАБЛО ячейка ГЕН ПОСТ ПРАВ (0 - серый, 1 - желтый, 2 - красный)
 int pr_gen_ac_left_elektro_planer;	//ИНФ ТАБЛО ячейка ГЕН ПЕРЕМ ЛЕВ (0 - серый, 1 - желтый, 2 - красный)
 int pr_gen_ac_right_elektro_planer; //ИНФ ТАБЛО ячейка ГЕН ПЕРЕМ ПРАВ (0 - серый, 1 - желтый, 2 - красный)
 bool pr_ruchnoe_upravl_elektro_planer;	//ручное управление
 bool pr_nozhnoe_upravl_elektro_planer;	//ножное управление
 int pr_aerodr_ist_elektro_planer;	//ИНФ ТАБЛО ячейка АЭРОДР ИСТ (0 - серый, 1 - желтый, 2 - красный)
 bool pr_zakrylki_18_elektro_planer;	//+закрылки 18 град
 bool pr_obled_elektro_planer;		//+обледенение
 bool pr_akkum_elektro_planer;		//+аккум
 
 int gen_dc_table_left; //Окрашивание области левого генератора постоянного тока (0 - серый, зачеркнут значок и табличка с параметрами, снизу надпись
						//серая, 1 - таблица, значок и надпись зеленые, 2 - табличка и значок красные, но внутри таблички I=<пробел А>серым, напись 
						//снизу серая).
 int gen_dc_table_right;//аналогично левому
 int gen_ac_table_left;	// Окрашивание области таблицы левого генератора перем тока (0 - серая, зачеркнуты значения , 1 - зеленая таблица
						// 2 - таблица красная)
 int gen_ac_table_right;// аналогично левому
 int gen_ac_logo_left;	// Окрашивание области кружка левого генератора перем тока (0 - серый, зачеркнут значок, 1 - зеленый значок
						// , 2 - значок красный)
 int gen_ac_logo_right;// аналогично левому 
 int accum_logo_1;  	// Окрашивание значка АККУМ (0 - серый зачеркнутый, 1 - серый незачеркнутый, 2 - зеленый, 3 - красный)
 int accum_logo_2;		//
 int accum_parameters_1;// Окрашивание параметров аккумулятора (0 - серые зачеркнутые, 1 - зеленые, 2 - красные)
 int accum_parameters_2;//
 int emerg_bus_1;		// Окрашивание аварийной шины (0 - шина серая, надпись сверху пропадает, снизу зачеркивается, 1 - шина серая, строчка сверху
						//пропадает, снизу не зачеркивается, 2 - шина зеленая, строчка сверху выделена зеленым)
 int emerg_bus_2;		// аналогично левой
 int conv_36v_table_1;	// Окрашивание таблицы ПРЕОБР 36В левой (0 - серый зачеркнутый, 1 - зеленый, 2 - красный)
 int conv_36v_table_2;	// аналогично левой
 int U26V_400Hz_1;		// Окрашивание строчки U~26В, 400Гц (0 - серый, строчка сверху пропадает, снизу зачеркивается, 1 - серый, строчка сверху
						//пропадает, снизу не зачеркивается, 2 - зеленый, строчка сверху выделена зеленым)
 int U26V_400Hz_2;		// аналогично левой 
 int indication_S1;		// Окрашивание шины S1 на кадре СЭС (0 - серый, зачеркнута строчка S1, 1 - серый, не зачеркнута строчка S1, 2 - зеленый,
						// строчка выделена зеленым)
 int indication_S2;		// аналогично S1
 bool combining_dc_bus;	// Окрашивание объединяющей шины генераторов постоянного тока (false - шина серая, true - шина зеленая)
 bool combining_ac_bus;	// Окрашивание объединяющей шины генераторов переменного тока (false - шина серая, true - шина зеленая)
 bool vertical_left_top_1;  // левая вертикальная шина участок 1 (false - серая, true - зеленая)
 bool vertical_left_top_2;  // левая вертикальная шина участок 2 (false - серая, true - зеленая)
 bool vertical_left_top_3;  // левая вертикальная шина участок 3 (false - серая, true - зеленая)
 bool vertical_left_top_4;  // левая вертикальная шина участок 4 (false - серая, true - зеленая)
 bool vertical_right_top_1; // левая вертикальная шина участок 1 (false - серая, true - зеленая)
 bool vertical_right_top_2; // левая вертикальная шина участок 2 (false - серая, true - зеленая)
 bool vertical_right_top_3; // левая вертикальная шина участок 3 (false - серая, true - зеленая)
 bool vertical_right_top_4; // левая вертикальная шина участок 4 (false - серая, true - зеленая)
 bool vertical_left_bottom_1;  // левая вертикальная шина участок 1 (false - серая, true - зеленая)
 bool vertical_left_bottom_2;  // левая вертикальная шина участок 2 (false - серая, true - зеленая)
 bool vertical_right_bottom_1; // левая вертикальная шина участок 1 (false - серая, true - зеленая)
 bool vertical_right_bottom_2; // левая вертикальная шина участок 2 (false - серая, true - зеленая)
 bool full_otkaz_ses;		   // полный отказ СЭС (true-отказ, false-норм)
}SH_MFI_SYSTEM_COMMON_INF;

//Кадр - СИСТЕМА-СЭС
typedef struct
{
//мнемоническая схема работы генераторов переменного тока
 float gen1_AC_faza_A;			//напряжение фазы А генератора 115В №1
 float gen1_AC_faza_B;			//напряжение фазы В генератора 115В №1
 float gen1_AC_faza_C;			//напряжение фазы С генератора 115В №1
 float gen2_AC_faza_A;			//напряжение фазы А генератора 115В №2
 float gen2_AC_faza_B;			//напряжение фазы В генератора 115В №2
 float gen2_AC_faza_C;			//напряжение фазы С генератора 115В №2
 bool no_data_gen1_AC;			//нет достоверных данных по работе генератора переменного тока №1 (true-нет данных, false - есть данные)
 bool no_data_gen2_AC;			//нет достоверных данных по работе генератора переменного тока №2 (true-нет данных, false - есть данные)

//мнемоническая схема работы генераторов постоянного тока
 float gen1_DC_volt;			//напряжение генератора №1 постоянного тока
 float gen1_DC_amper;			//сила тока генератора №1 постоянного тока
 float gen2_DC_volt;			//напряжение генератора №1 постоянного тока
 float gen2_DC_amper;			//сила тока генератора №1 постоянного тока

//мнемоническая схема аккумуляторной батареи
 bool otkaz_accum1;			//отказ аккумуляторной батареи №1 (true-да, false-нет)
 bool otkaz_accum2;			//отказ аккумуляторной батареи №2 (true-да, false-нет)
 float accum1_volt;			//напряжение аккумуляторной батареи №1
 float accum2_volt;			//напряжение аккумуляторной батареи №2
 float accum1_amper;			//сила тока аккумуляторной батареи №1
 float accum2_amper;			//сила тока аккумуляторной батареи №2

//мнемосхема преобразователя 36В
 float preobr36v_1_faza_2_3;		//напряжение между фазами 2-3 генератора 36В №1
 float preobr36v_1_faza_1_3;		//напряжение между фазами 1-3 генератора 36В №1
 float preobr36v_1_faza_1_2;		//напряжение между фазами 1-2 генератора 36В №1
 float preobr36v_2_faza_2_3;		//напряжение между фазами 2-3 генератора 36В №1
 float preobr36v_2_faza_1_3;		//напряжение между фазами 1-3 генератора 36В №1
 float preobr36v_2_faza_1_2;		//напряжение между фазами 1-2 генератора 36В №1

 //мнемосхема аварийной шины
 float avar_shina_1_volt;		//аварийная шина №1 вольт
 float avar_shina_2_volt;		//аварийная шина №2 вольт

 bool no_data_gen1_DC;			//нет достоверных данных по работе генератора переменного тока №1 (true-нет данных, false - есть данные)
 bool no_data_gen2_DC;			//нет достоверных данных по работе генератора переменного тока №2 (true-нет данных, false - есть данные)
}SH_MFI_SYSTEM_SES;

//Кадр - СИСТЕМА-ПОС
typedef struct
{
 bool pr_POS_A;				//работа противообледенительной системы А (true-вкл, false-выкл)
 bool pr_POS_B;				//работа противообледенительной системы B (true-вкл, false-выкл)
 bool pr_POS_C;				//работа противообледенительной системы C (true-вкл, false-выкл)
 bool pr_obogrev_steklo_left;		//Включен обогрев стекол слева (true-вкл, false-выкл)
 bool pr_obogrev_steklo_right;		//Включен обогрев стекол справа (true-вкл, false-выкл)
 bool faza_slow_fast;			//true - БЫСТРЫЙ, false - МЕДЛЕННЫЙ
 bool separ_lda_left_blinking;		//мигающий сепаратор льда левый true-мигает, false-не мигает
 bool separ_lda_right_blinking;		//мигающий сепаратор льда правый true-мигает, false-не мигает
}SH_MFI_SYSTEM_POS;

//Кадр - СИСТЕМА-ТОПЛ
typedef struct
{
 float fuel_count_konc_bak_left;	//количество топлива в концевом левом баке
 float fuel_count_konc_bak_right;	//количество топлива в концевом правом баке
 float fuel_count_osn_bak_left;		//количество топлива в основном левом баке
 float fuel_count_osn_bak_right;	//количество топлива в основном правом баке
 float p_fuel_left;			//давление топлива левой системы
 float p_fuel_right;			//давление топлива правой системы
 bool pr_sys_avar_upravl_engine_left;	//включена система управления аварийным режимом левого двигателя при помощи рычагов управления стоп-кранами 						//(true-вкл, false - выкл)
 bool pr_sys_avar_upravl_engine_right;	//включена система управления аварийным режимом правого двигателя при помощи рычагов управления стоп-кранами
					//(true-вкл, false - выкл)
 float balance_fuel;			//счетчик баланса топлива
}SH_MFI_SYSTEM_TOPL;

//Кадр - ПУ (вкладки АРК и РСБН)
typedef struct
{
 float channel_shtat_pult;		//частота канала в случае когда управление идет от штатного ПУ
	
 bool ark_kompas_antenna;		//НЕ ИСПОЛЬЗУЕТСЯ!!!! ДАННЫЕ БЕРУТСЯ из структуры МФПУ!!!!! true - активна надпись КОМПАС, false - активна надпись АНТЕННА
 bool ark_tlf_tlg;			//НЕ ИСПОЛЬЗУЕТСЯ!!!! ДАННЫЕ БЕРУТСЯ из структуры МФПУ!!!!! true - активна надпись ТЛФ, false - активна надпись ТЛГ
 bool opoznavanie;			//true - активна надпись ОПОЗНАВАНИЕ, false - не активна
}SH_MFI_PU_ARK_RSBN;

//ИНДИКАТОРЫ Б-8
//-----------------------------------------------
typedef struct
{
 int nabor;			// 0 = УКВ1, 1 = УКВ2, 2 = КВ, 3 = РЕЗ1, 4 = РЕЗ2
 int nabor_roll;	// вращение центральной галеты НАБОР (по умолчанию = 0, поворот по часовой стрелке +1, поворот против часовой стрелки -1)
 int gromk;			// 0 = ВС, 1 = РИ, 2 = АРК, 3 = РНУ1, 4 = РНУ2, 5 = РНУ3
 int gromk_roll;	// вращение центральной галеты ГРОМК (по умолчанию = 0, поворот по часовой стрелке +1, поворот против часовой стрелки -1)

 bool line1treug;	// нажатие кнопки треугольника с левой стороны от дисплея в 1 линии
 bool line2treug;	// нажатие кнопки треугольника с левой стороны от дисплея во 2 линии
 bool line3treug;   // нажатие кнопки треугольника с левой стороны от дисплея в 3 линии

 bool button_psh_1; // нажатие ПШ в первой линии
 bool button_psh_2; // нажатие ПШ во второй линии
 bool button_psh_3; // нажатие ПШ в третей линии

 bool button_APr;	// нажатие кнопки АПр
 bool button_CA;	// нажатие кнопки СА
 bool button_RI;	// нажатие кнопки РИ

 bool button_1;		// нажатие на кнопку с цифрой 1
 bool button_2;		// нажатие на кнопку с цифрой 2
 bool button_3;		// нажатие на кнопку с цифрой 3
 bool button_4;		// нажатие на кнопку с цифрой 4
 bool button_5;		// нажатие на кнопку с цифрой 5
 bool button_6;		// нажатие на кнопку с цифрой 6
 bool button_7;		// нажатие на кнопку с цифрой 7
 bool button_8;		// нажатие на кнопку с цифрой 8
 bool button_9;		// нажатие на кнопку с цифрой 9
 bool button_0;		// нажатие на кнопку с цифрой 0
 bool button_vvod;	// нажатие на кнопку ВВОД
 bool button_sbros; 	// нажатие на кнопку СБРОС

 bool Kn_Rad;		// Кнопка «Радио лев» (из кабины)
 bool Kn_SPU;		// Кнопка «СПУ лев» (из кабины)
}SHB8_LEFT_IN;


// ГЛАВНАЯ СТРУКТУРА - ВХОДНЫЕ ДАННЫЕ ДЛЯ МФИ, МФПУ, Б-8 (ОТ ПАК ВС)
//-------------------------------------------
struct SHMAIN_STRUCT_IN
{
 int ID;                   // ID = 3000

 SH_MFI_IN                 MFI_IN;                 // МФИ 3 ШТУКИ НА ПРИЕМ
 SH_MFPU_IN                MFPU_IN;                // МФПУ 2 ШТУКИ НА ПРИЕМ
 SH_MFI_PILOTAZH_IN	       MFI_PILOTAZH_IN;    	   // Данные для кадра ПИЛОТАЖ
 SH_MFI_SYSTEM_KONF_IN     MFI_SYSTEM_KONF_IN; 	   // Данные для кадра СИСТЕМ-ОБЩ-КОНФ
 SH_MFI_SYSTEM_COMMON_INF  MFI_SYSTEM_COMMON_INF;  // Данные для кадра СИСТЕМ-ОБЩ-КОНФ-ИНФ
 SH_MFI_SYSTEM_SES         MFI_SYSTEM_SES;	       // Данные для кадра СИСТЕМ-СЭС
 SH_MFI_SYSTEM_POS	       MFI_SYSTEM_POS;	       // Данные для кадра СИСТЕМ-ПОС
 SH_MFI_SYSTEM_TOPL 	   MFI_SYSTEM_TOPL;	       // Данные для кадра СИСТЕМ-ТОПЛ
 SH_MFI_PU_ARK_RSBN	       MFI_PU_ARK_RSBN;	       // Данные для раздела ПУ

 SHB8_LEFT_IN              B8_LEFT_IN;            //
 SHB8_LEFT_IN              B8_RIGHT_IN;           //

 bool azs_pu1;		// АЗС ПУ1 (1 - вкл, 0 - выкл)
 bool azs_pu2;		// АЗС ПУ2 (1 - вкл, 0 - выкл)
 bool azs_cims;		// АЗС ЦИМС (1 - вкл, 0 - выкл)
 bool azs_dkmv;		// АЗС ДКМВ (1 - вкл, 0 - выкл)
 bool azs_dmv1;		// АЗС ДМВ 1 (1 - вкл, 0 - выкл)
 bool azs_dmv2;		// АЗС ДМВ 2 (1 - вкл, 0 - выкл)
 bool azs_abs;		// АЗС АБС - не задействуем (1 - вкл, 0 - выкл)
 bool azs_abonent;	// АЗС АБОНЕНТ - не задействуем (1 - вкл, 0 - выкл)

 bool pr_voltage_azs_a43;  // признак наличия напряжения на шине левого аккумулятора:
 bool pr_voltage_azs_a44;  // признак наличия напряжения на шине правого аккумулятора
 bool otkaz2radio;	       // Отказ двух УКВ радиостанций

 bool Close;                // Признак закрытия программ и завершения работы Windows
};


//-----------------------------------------------
//МФИ 3 ШТУКИ НА ПЕРЕДАЧУ
typedef struct
{
//ПДГ-РТС
 int    Channel_NAV;  		// № КАНАЛА НАВИГАЦИИ РСБН
 int    Channel_POS;   		// № КАНАЛА ПОСАДКИ РСБН
 double ARK_D;         		// АРК Д (ЧАСТОТА КГЦ)
 double ARK_B;         		// АРК Б (ЧАСТОТА КГЦ) 
//ПДГ-БОРТ 
 int	Nomer_Borta;		//Номер борта
 float 	Hzad;				//Заданная высота
 float 	Hopasn;				//Опасная высота (ЛИО стр.80), если ни одно шасси не выпущено, то отображается именно она
 float 	Hvpr;				//Высота принятия решения (влияет на цвет подложки у счетчика радиовысотомера Radio_H)
 float 	Kren_Kritic;		//Критический крен (желтые риски на кадре ПЛТ)
 int	Select_P;			//Какая система отсчета выбрана пилотом QFE=1, QNH=2, Рст=3
 float	QFE_mmrt;			//QFE в ммрт
 float 	QFE_gpa;			//QFE в гПа
 float 	QNH_mmrt;			//QNH в ммрт
 float 	QNH_gpa;			//QNH в гПа 
 float 	plotnost_fuel;		//плотность топлива в г/см3 
//ПДГ-НАВИГАЦИЯ
 int	delta_hour;			//ЧАСОВОЙ ПОЯС (корректировка от времени UTC)
 bool 	MK_or_IK; 			//true - магнитный курс, false - истинный курс 
 double MAG_Sklon;			//магнитное склонение
 float 	Zad_Kurs;			//Заданный курс(в градусах) 
 float 	Zad_PU;				//Заданный путевой угол(в градусах) 
 bool 	Select_Sposob;		//Способ управления true - маршрутный, false - путевой
 int	shpp_V_vetra;		//ШПП U ветра км/ч
 int 	shpp_Delta_vetra; 	//ШПП бэта ветра град
 int	shpp_V_ist; 		//ШПП Vи км/ч
//ПДГ-НАСТРОЙКИ
 bool	metry_futy;			//ПАРАМЕТР ВЫСОТА //true - метры, false - футы
 bool	mmrt;				//ПАРАМЕТР АТМ.ДАВЛЕНИЕ true - ммрт, false - гПа
 bool   type_rsbn;			//ПАРАМЕТР Тип наземн. РСБН (для ввода кан. НАВ) //true - напр РМ , false - ненапр РМ
//ПУ-АРК-40
 bool   ARK_TLF_TLG;   		//АРК РЕЖИМ (ТЛФ =0, ТЛГ=1)
 bool   ARK_COM_ANT;   		//АРК РЕЖИМ (КОМПАС =0, АНТЕННА=1)
 bool   ARK_tek;       		//Текущий АРК (1= ДАЛЬНИЙ, 0=БЛИЖНИЙ)
//ПУ-РСБН
 bool   RSBN_MODE;      	//(0= NAVIGACIA, 1 = POSADKA);
 bool	EDIT_MODE;
 bool   PR_CHECK_FLIGHT_LEVEL;
 bool	No_Direct; 		//признак включения директорного управления (true - НЕ ПОКАЗЫВАЕТ ПЛАНКИ, false - показывает) //15.06.2021 НОВЫЙ ПАРАМЕТР РАНЬШЕ БЫЛ В ПРИЕМЕ
 
 bool start_control_RSBN;  //признак нажатия кнопки КОНТРОЛЬ РСБН в кадре ПУ (true - финиш)
 bool start_control_ARK;   //признак нажатия кнопки КОНТРОЛЬ АРК в кадре ПУ (true - финиш)
 
 //исходящие данные по навигации
 bool marshrut_stu;		  		//true - марш, false - пут
 bool marshrut_spnt;			//факт нажатия на выбор ЛУР/ПРХД/ЗАХД - держу 5 циклов! (true - нажато, false - нет)
 bool marshrut_time;			//true - Тпол, false = СЕК-Р

 bool posadka_pk;			//прямой курс true - прямой, false - обратный
 bool posadka_zahd;			//true - БКОР, false - МКОР
 bool posadka_krug;			//true - левый, false - правый
 bool posadka_time;			//true - Тпол, false = СЕК-Р
 
 bool rezhim_marshrut;		//true - включен МАРШРУТ, false - включена ПОСАДКА
 
 int priznak_sns;		//0 - АВТ, 1 - СНС1, 2 - СНС2, 3 - СНС3
 int priznak_svs;		//0 - АВТ, 1 - СВС1, 2 - СВС2, 3 - СВС3
 int priznak_bkv;		//0 - АВТ, 1 - БКВ1, 2 - БКВ2, 3 - БКВ3
  
 int nomer_marshruta;   //номер выбранного маршрута
						//[0] - M18-82						
						//[1] - M18А-262						
						//[2] - М15-262
						//[3] - М15А-262
						//[4] - БАЛАШОВ-82
						//[5] - БАЛАШОВ-262
						//[6] - М15-82
						//[7] - М15A-82						
						//[8] - М20
						//[9..18] - РЕЗЕРВ ПОД БУДУЩИЕ МАРШРУТЫ
						//[19] - технический/пустой маршрут
						//[20] - РТИЩЕВО БКОР, ПР КУРС, ЛЕВ
						//[21] - РТИЩЕВО БКОР, ОБР КУРС, ЛЕВ
						//[22] - РТИЩЕВО БКОР, ПР КУРС, ПРАВ
						//[23] - РТИЩЕВО БКОР, ОБР КУРС, ПРАВ
						//[24] - РТИЩЕВО МКОР, ПР КУРС, ЛЕВ
						//[25] - РТИЩЕВО МКОР, ОБР КУРС, ЛЕВ
						//[26] - РТИЩЕВО МКОР, ПР КУРС, ПРАВ
						//[27] - РТИЩЕВО МКОР, ОБР КУРС, ПРАВ
						//[30] - БАЛАШОВ БКОР, ПР КУРС, ЛЕВ
						//[31] - БАЛАШОВ БКОР, ОБР КУРС, ЛЕВ
						//[32] - БАЛАШОВ БКОР, ПР КУРС, ПРАВ
						//[33] - БАЛАШОВ БКОР, ОБР КУРС, ПРАВ
						//[34] - БАЛАШОВ МКОР, ПР КУРС, ЛЕВ
						//[35] - БАЛАШОВ МКОР, ОБР КУРС, ЛЕВ
						//[36] - БАЛАШОВ МКОР, ПР КУРС, ПРАВ
						//[37] - БАЛАШОВ МКОР, ОБР КУРС, ПРАВ
						//[40] - БОРИСОГЛЕБСК БКОР, ПР КУРС, ЛЕВ
						//[41] - БОРИСОГЛЕБСК БКОР, ОБР КУРС, ЛЕВ
						//[42] - БОРИСОГЛЕБСК БКОР, ПР КУРС, ПРАВ
						//[43] - БОРИСОГЛЕБСК БКОР, ОБР КУРС, ПРАВ
						//[44] - БОРИСОГЛЕБСК МКОР, ПР КУРС, ЛЕВ
						//[45] - БОРИСОГЛЕБСК МКОР, ОБР КУРС, ЛЕВ
						//[46] - БОРИСОГЛЕБСК МКОР, ПР КУРС, ПРАВ
						//[47] - БОРИСОГЛЕБСК МКОР, ОБР КУРС, ПРАВ						
						//[101] - ПОЛЕТ В ПИЛОТАЖНУЮ ЗОНУ 1
						//[102] - ПОЛЕТ В ПИЛОТАЖНУЮ ЗОНУ 2
						//[103] - ПОЛЕТ В ПИЛОТАЖНУЮ ЗОНУ 3
						//[104] - ПОЛЕТ В ПИЛОТАЖНУЮ ЗОНУ 4
						//[105] - ПОЛЕТ В ПИЛОТАЖНУЮ ЗОНУ 5
						//[106] - ПОЛЕТ В ПИЛОТАЖНУЮ ЗОНУ 6
						//[201] - ПОЛЕТ НА ГЕОТОЧКУ АРКАДАК
						//[202] - ПОЛЕТ НА ГЕОТОЧКУ БАЙКА
						//[203] - ПОЛЕТ НА ГЕОТОЧКУ БАКУРЫ
						//[204] - ПОЛЕТ НА ГЕОТОЧКУ ВАРВАРИНО
						//[205] - ПОЛЕТ НА ГЕОТОЧКУ ЕКАТЕРИНОВКА
						//[206] - ПОЛЕТ НА ГЕОТОЧКУ ЕЛАНЬ
						//[207] - ПОЛЕТ НА ГЕОТОЧКУ ЖИЗНЕННАЯ
									
 int nomer_tek_point;   //номер текущей точки на исполнении (для случая когда пилот сам меняет на МФИ)
 
 bool priznak_start_t_pol;	//резерв для посылки сигнала нажатия кнопки для Тполета
  
 int reserve1;		 	//использована для хранения выбранного маршрута в ББД-МАРШРУТЫ, для синхронизации на всех 3 МФИ выбранного маршрута (переменная bbd_marshrut->select_punkt)
 int reserve2;			//использована для отправки сигнала нажатия кнопки ПОВТ (0 - не нажата, 1 - нажата)
 int reserve3;			//использована для подачи команд для таймера Тполета в кадре НВГ 
 int reserve4;			//использована для подачи команд для секундомера СЕК-Р в кадре НВГ
 int reserve5;			//использована для хранения выбранного аэродрома для синхронизации МФИ (bbd_aerodrom->select_aerodrom)
 double reserve6;
 double reserve7;
 double reserve8;
 double reserve9;
 double reserve10;
 bool reserve11;
 bool reserve12;       //синхронизация ЗПУ на пультах МФИ (true - фиолетовая/автоматич режим, false - белая/ручной режим)
 bool reserve13;	   //синхронизация внутреннего параметра marshrut_begin на всех МФИ (я использую для ОНИ)
 bool reserve14;
 bool reserve15;
}SH_MFI_OUT;

//-----------------------------------------------
//МФПУ 2 ШТУКИ НА ПЕРЕДАЧУ
typedef struct
{
 double Param1;
}SH_MFPU_OUT;

//-----------------------------------------------
//ДЛЯ РАДИОСВЯЗИ НА ПЕРЕДАЧУ
struct SHRADIO_OUT
{
 bool Priz_CIMS;                // Признак работы ЦИМС

 bool Priz_Rab_UKV1;            // Признак работы УКВ1
 bool Priz_Rab_UKV2;            // Признак работы УКВ2
 bool Priz_Rab_KV;              // Признак работы КВ

 bool  Priz_Active_UKV1_pilot1; // Признак активной УКВ1 (1 пилот)
 bool  Priz_Active_UKV2_pilot1; // Признак активной УКВ2 (1 пилот)
 bool  Priz_Active_KV_pilot1;   // Признак активной КВ   (1 пилот)

 bool  Priz_Active_UKV1_pilot2; // Признак активной УКВ1 (2 пилот)
 bool  Priz_Active_UKV2_pilot2; // Признак активной УКВ2 (2 пилот)
 bool  Priz_Active_KV_pilot2;   // Признак активной КВ   (2 пилот)

 bool  Priz_UKV1_DOP_pilot1;    // Признак дополнительного прослушивания УКВ1 (1 пилот)
 bool  Priz_UKV2_DOP_pilot1;    // Признак дополнительного прослушивания УКВ2 (1 пилот)
 bool  Priz_KV_DOP_pilot1;      // Признак дополнительного прослушивания КВ   (1 пилот)

 bool  Priz_UKV1_DOP_pilot2;    // Признак дополнительного прослушивания УКВ1 (2 пилот)
 bool  Priz_UKV2_DOP_pilot2;    // Признак дополнительного прослушивания УКВ2 (2 пилот)
 bool  Priz_KV_DOP_pilot2;      // Признак дополнительного прослушивания КВ   (2 пилот)

 bool  Priz_noise_UKV1;         // Признак "подавление шума" УКВ1 (кабина) (положение вкл =1)
 bool  Priz_noise_UKV2;         // Признак "подавление шума" УКВ2 (кабина) (положение вкл =1)
 bool  Priz_noise_KV;           // Признак "подавление шума" КВ   (кабина) (положение вкл =1)

 float Vol_UKV1_pilot1;         // Громкость УКВ1 (1 пилот) (0+100%)
 float Vol_UKV2_pilot1;         // Громкость УКВ2 (1 пилот) (0+100%)
 float Vol_KV_pilot1;           // Громкость КВ   (1 пилот) (0+100%)
 float Vol_UKV1_DOP_pilot1;     // Громкость дополнительного прослушивания УКВ1 (1 пилот) (0+100%)
 float Vol_UKV2_DOP_pilot1;     // Громкость дополнительного прослушивания УКВ2 (1 пилот) (0+100%)
 float Vol_KV_DOP_pilot1;       // Громкость дополнительного прослушивания КВ   (1 пилот) (0+100%)
 float Vol_SPU_pilot1;          // Громкость СПУ (1 пилот) (0+100%)
 float Vol_ARK_pilot1;          // Громкость АРК (1 пилот) (0+100%)
 float Vol_RNU1_pilot1;         // Громкость прослушивания радионавигационного уст-ва №1 (1 пилот) (0+100%)
 float Vol_RNU2_pilot1;         // Громкость прослушивания радионавигационного уст-ва №2 (1 пилот) (0+100%)
 float Vol_RNU3_pilot1;         // Громкость прослушивания радионавигационного уст-ва №3 (1 пилот) (0+100%)

 float Vol_UKV1_pilot2;         // Громкость УКВ1 (2 пилот) (0+100%)
 float Vol_UKV2_pilot2;         // Громкость УКВ2 (2 пилот) (0+100%)
 float Vol_KV_pilot2;           // Громкость КВ   (2 пилот) (0+100%)
 float Vol_UKV1_DOP_pilot2;     // Громкость дополнительного прослушивания УКВ1 (2 пилот) (0+100%)
 float Vol_UKV2_DOP_pilot2;     // Громкость дополнительного прослушивания УКВ2 (2 пилот) (0+100%)
 float Vol_KV_DOP_pilot2;       // Громкость дополнительного прослушивания КВ   (2 пилот) (0+100%)
 float Vol_SPU_pilot2;          // Громкость СПУ (2 пилот) (0+100%)
 float Vol_ARK_pilot2;          // Громкость АРК (2 пилот) (0+100%)
 float Vol_RNU1_pilot2;         // Громкость прослушивания радионавигационного уст-ва №1 (2 пилот) (0+100%)
 float Vol_RNU2_pilot2;         // Громкость прослушивания радионавигационного уст-ва №2 (2 пилот) (0+100%)
 float Vol_RNU3_pilot2;         // Громкость прослушивания радионавигационного уст-ва №3 (2 пилот) (0+100%)

 float Freq_UKV1;               // Частота УКВ1 (МГЦ) (кабина)
 float Freq_UKV2;               // Частота УКВ2 (МГЦ) (кабина)
 float Freq_KV;                 // Частота КВ   (МГЦ) (кабина)

 int gromk[2];			// Положение галетника ГРОМК [2] - 0 левый / 1 правый //значения: 0=ВС / 1=РС / 2=АРК / 3=РНУ1 / 4=РНУ2 / 5=РНУ3


 // передать для речевого на Пульт инструктора
 bool   List1;        // Включение прослушивания списка 1 пилот
 bool   List2;        // Включение прослушивания списка 2 пилот
 double Volume1;      // Громкость речевого 1 пилот (0+100%)
 double Volume2;      // Громкость речевого 2 пилот (0+100%)
};

// ГЛАВНАЯ СТРУКТУРА - ВЫХОДНЫЕ ДАННЫЕ С МФИ И МФПУ (КОГДА БУДЕТ ОБРАТНАЯ СВЯЗЬ С ПАК ВС)
//-------------------------------------------
struct SHMAIN_STRUCT_OUT
{
 int          ID;          // ID = 4044

 SHRADIO_OUT  RADIO_OUT;  // ДЛЯ РАДИОСВЯЗИ НА ПЕРЕДАЧУ
 SH_MFI_OUT   MFI_OUT;    // МФИ 3 ШТУКИ НА ПЕРЕДАЧУ
 SH_MFPU_OUT  MFPU_OUT;   // МФПУ 2 ШТУКИ НА ПЕРЕДАЧУ

 int 		  DVol1;	  // Дискретная громкость 1 пилота (громкость от Нечунаева которую он просил отдать Пиксайкину)
 int 		  DVol2;	  // Дискретная громкость 2 пилота (громкость от Нечунаева которую он просил отдать Пиксайкину)
};


#pragma pack(pop)

#endif
